---
name: Setup Cloudflare WARP
description: Setup Cloudflare WARP for secure network access on GitHub MacOS runners

outputs:
  certificate_path:
    description: Path to the Cloudflare inspection certificate
    value: ${{ steps.install_cert.outputs.certificate_path }}

runs:
  using: composite
  steps:
    - name: Get secrets from Vault
      id: secrets
      uses: SonarSource/vault-action-wrapper@320bd31b03e5dacaac6be51bbbb15adf7caccc32 # 3.1.0
      with:
        secrets: |
          development/kv/data/cloudflare/warp-github-runner client-id | CLOUDFLARE_AUTH_CLIENT_ID;
          development/kv/data/cloudflare/warp-github-runner client-secret | CLOUDFLARE_AUTH_CLIENT_SECRET;
          development/kv/data/cloudflare/warp-github-runner device-posture-secret | CLOUDFLARE_DEVICE_SECRET;
          development/kv/data/cloudflare/warp-github-runner inspection-certificate | CLOUDFLARE_INSPECTION_CERTIFICATE;

    - name: Setup Cloudflare WARP Device Posture Check
      shell: bash
      run: |
        # Create directory if it doesn't exist
        sudo mkdir -p /private/etc

        # Create device posture check file
        echo "${{ fromJSON(steps.secrets.outputs.vault).CLOUDFLARE_DEVICE_SECRET }}" | \
          sudo sh -c 'cat > /private/etc/cloudflare-warp-posture.json'

        # Print SHA256 hash for verification
        echo "SHA256 hash of the posture file:"
        shasum -a 256 /private/etc/cloudflare-warp-posture.json

    - name: Install inspection certificate
      id: install_cert
      shell: bash
      run: |
        echo "${{ fromJSON(steps.secrets.outputs.vault).CLOUDFLARE_INSPECTION_CERTIFICATE }}" | \
          sudo sh -c 'cat > /private/etc/cloudflare-inspection.pem'

        sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain /private/etc/cloudflare-inspection.pem

        # Make certificate path available to subsequent steps and platform-specific tools
        echo "CLOUDFLARE_INSPECTION_CERTIFICATE_PATH=/private/etc/cloudflare-inspection.pem" >> $GITHUB_ENV

        # Node.js
        echo "NODE_EXTRA_CA_CERTS=/private/etc/cloudflare-inspection.pem" >> $GITHUB_ENV

        # Python (requests, urllib3, etc.)
        echo "REQUESTS_CA_BUNDLE=/private/etc/cloudflare-inspection.pem" >> $GITHUB_ENV

        # General SSL/TLS tools (curl, wget, etc.)
        echo "SSL_CERT_FILE=/private/etc/cloudflare-inspection.pem" >> $GITHUB_ENV
        echo "CURL_CA_BUNDLE=/private/etc/cloudflare-inspection.pem" >> $GITHUB_ENV

        # Git
        echo "GIT_SSL_CAINFO=/private/etc/cloudflare-inspection.pem" >> $GITHUB_ENV

        # Java
        echo "Importing certificate to Java trust store..."
        sudo keytool -import -alias cloudflare-warp -cacerts -file /private/etc/cloudflare-inspection.pem -storepass changeit -noprompt || true

        # Set output for workflows to reference
        echo "certificate_path=/private/etc/cloudflare-inspection.pem" >> $GITHUB_OUTPUT

    - name: Disable Ipv6 for Java
      shell: bash
      run: |
        # Java - prefer IPv4 stack for WARP compatibility
        echo "JAVA_TOOL_OPTIONS=-Djava.net.preferIPv4Stack=true" >> $GITHUB_ENV

    - name: Setup Cloudflare WARP
      uses: Boostport/setup-cloudflare-warp@4e41641ec6b5a3afde97e18a1da9d7b3efd78d32 # v1.17.0
      with:
        organization: sonarsource
        auth_client_id: ${{ fromJSON(steps.secrets.outputs.vault).CLOUDFLARE_AUTH_CLIENT_ID }}
        auth_client_secret: ${{ fromJSON(steps.secrets.outputs.vault).CLOUDFLARE_AUTH_CLIENT_SECRET }}

    - name: Wait for WARP connection to be ready
      shell: bash
      run: |
        echo "Waiting for WARP connection to be ready..."
        sleep 180
        echo "WARP connection ready"
